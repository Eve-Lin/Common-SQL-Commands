//SQL Commands

1. SELECT

Syntax: SELECT column1, column2...
FROM table_name

2. SELECT (Distinct/non-duplicate values):

SELECT DISTINCT column1, column2,...
FROM table_name;

SELECT COUNT (DISTINCT Country) FROM Customers; //lists the number of distinct customer countries; doesn't work in Edge & Firefox
//For Firefox & Edge
SELECT Count (*) AS DistinctCountries FROM (SELECT DISTINCT Country FROM Customers);

3. WHERE clause is used to filter records

SELECT column1, column2...
FROM table_name
WHERE condition;

Ex. SELECT * FROM Customers
WHERE Country = 'Mexico'; //single quotes (double are also possible)

SELECT * FROM Customers
WHERE CustomerID = 1; //no quotes with numeric fields

4. SQL AND, OR & NOT

//AND
SELECT * FROM Customers
WHERE Country = 'Germany' AND City = 'Berlin';

//OR
SELECT * FROM Customers
WHERE City = 'Berlin' OR City = 'Düsseldorf';

//NOT
SELECT * FROM Customers
WHERE NOT Country = 'Germany';

More examples:

SELECT * FROM Customers
WHERE Country = 'Germany' AND (City = 'Berlin' OR City = 'Düsseldorf');

SELECT * FROM Customers
WHERE NOT Country = 'Germany' AND NOT Country = 'Denmark';

5. ORDER BY

Examples:

SELECT * FROM Customers
ORDER BY Country;

SELECT * FROM Customers
ORDER BY Country DESC;

SELECT * FROM Customers
ORDER BY Country, CustomerName; //first sorts by country and then by customer name

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;

6. INSERT INTO

INSERT INTO table_name(column1, column2, column3,...)
VALUES (value1, value2, value3,...);

//when adding values for all the columns in the table, we don't need to specify the column names in the SQL query

INSERT INTO table_name
VALUES(value1, value2, value3,...);

//insert data in specified columns
INSERT INTO Customers(CustomerName, City, Country)
VALUES('Cardinl', 'Berlin', 'Germany');

7. NULL Value

Syntax:

SELECT * FROM Customers
FROM table_name
WHERE column_name IS NULL;

SELECT * FROM Customers
FROM table_name
WHERE column_name IS NOT NULL;


8. UPDATE

Syntax:

UPDATE table_name
SET column1 = value1, column2 = value2,...
WHERE condition;

Examples:

UPDATE ContactName = 'Alfred Schmidt', City = 'Frankfurt'
WHERE CustomerID = 1;


9. DELETE - used to delete existing records in a table

Syntax:

DELETE FROM table_name WHERE condition;

Examples:
DELETE FROM Customers WHERE CustomerName = 'Alfred Futterkiste';

DELETE FROM table_name; //deletes all rows in a table


10. SELECT TOP/LIMIT/ROWNUM

a) SELECT TOP //SQL Server & MS Access Syntax

Syntax:
SELECT TOP number | percent column_name(s)
FROM table_name
WHERE condition;

Example:
SELECT TOP 3 * FROM Customers;
SELECT TOP 50 PERCENT * FROM Customers;

b) MySQL Syntax:
SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;

Example:
SELECT * FROM Customers
LIMIT 3;

c) Oracle Syntax:
SELECT column_name(s)
FROM table_name
WHERE ROWNUM <= number;

SELECT * FROM Customers
WHERE ROWNUM <= 3;


11. SQL JOIN

Example:

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customrs.CustomerID;

a) SQL INNER JOIN // Selects records that have matching values in both tables

Syntax:
SELECT column_name(s)
FROM table1
INNER JOIN table2 ON table1.column_name = table2.column_name;

Example:
SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

// Join three tables
SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customer.ID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);

b)SQL LEFT JOIN  // The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match.

Syntax:

SELECT column_name(s)
FROM table1
LEFT JOIN table2 ON table1.column_name = table2.column_name;

Example:
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;

c) SQL RIGHT JOIN // The RIGHT JOIN keyword returns all records from the right table (table2), and matched records from the left table (table1). The result is NULL from the left side, when there is no match

Syntax:
SELECT column_name(s)
FROM table1
RIGHT JOIN table2 ON table1.column_column_name = table2.column_name;

Example:
SELECT Orders.OrderID, Employees.LastName, EMployees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;
